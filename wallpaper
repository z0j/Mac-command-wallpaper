#!/bin/bash

path=$(cd "$(dirname "$0")"; pwd)
real_path=""
i=0
for pt in $path ; do
	if [ $i == 0 ] ; then
		real_path=$pt
		i=1
	else
		real_path=$real_path"\ "$pt
	fi
done
path=$real_path
cd $path

param2=$2
param3=$3

search=''
pic_path="background/default.jpg"
if [ $# -gt 0 ]; then
	# pic_path or randweb or randlocal or save
	pic_path=$1
	extension="${pic_path##*.}"
	if [ ${pic_path:0:3} == "--h" ]; then
		echo -e "useage -> wallpaper [para1] [para2] [para3] \n\t\teach para can be empty[means no function]\n\t\twhat's more, \"xxx\" means you should input this string to apply the function \n"
		echo -e "para1 : your_wallpaper_path    :  wallpaper from yourself local path, like background/default.jpg \n" \
			    "       \"randweb\"        :  wallpaper from web random , this will take a few seconds, please be patience\n" \
				"       \"randweb:tag\"    :  wallpaper from web random and Specified label in search , this will take a few seconds, please be patience\n" \
			    "       \"randlocal\"      :  wallpaper from background random" \
				"		\"set\"            :  set config before random . use like \"wallpaper set purlity 001\". You can see some hidden benefits, provided you set the apikey config"
		echo "para2 : \"com\"            :  composite code calender "
		echo "para3 : number[0-52]     :  this means pass week counter of code calender, with para2"
		exit -1
	elif [[ $extension =~ ^randweb: ]]; then
		search=${extension:8}
		extension='randweb'
		pic_path='randweb'
	elif [ $extension != "jpg" -a $extension != "png" -a $extension != "randweb" -a $extension != "randlocal" -a $extension != "set" -a $extension != "save" ]; then
		echo "first para should be your_wallpaper_path or randweb or randlocal or save"
		exit -1
	fi
fi


composite="no"
pass_week=0
week_num=`date +%V`
if [ $# -gt 1 ]; then
	composite=$2
	if [ ${composite:0:3} == "com" ] ; then
		composite="yes"
		if [ $# -gt 2 ]; then
			pass_week=$3
			if [ $pass_week -ge $week_num ] ; then
				week_num="01"
			else
				#week_num=`date +%V -d -${pass_week}weeks`
				week_num=$(($week_num -${pass_week}))
				if [ ${#week_num} -eq 1 ] ; then
					week_num="0"$week_num
				fi
			fi
		fi
		if [ ! -d composite ] ; then
			mkdir composite 
		fi
	else
		composite="no"
	fi
fi

function random()
{
    max=$1
    num=$(date +%s)
    ((retnum=num%max+1))
    echo $retnum
}

### @author lux feary
function getJsonValuesByAwk() {
    awk -v json="$1" -v key="$2" -v defaultValue="$3" 'BEGIN{
        foundKeyCount = 0
        while (length(json) > 0) {
            # pos = index(json, "\""key"\"");
            pos = match(json, "\""key"\"[ \\t]*?:[ \\t]*");
            if (pos == 0) {if (foundKeyCount == 0) {print defaultValue;} exit 0;}
 
            ++foundKeyCount;
            start = 0; stop = 0; layer = 0;
            for (i = pos + length(key) + 1; i <= length(json); ++i) {
                lastChar = substr(json, i - 1, 1)
                currChar = substr(json, i, 1)
 
                if (start <= 0) {
                    if (lastChar == ":") {
                        start = currChar == " " ? i + 1: i;
                        if (currChar == "{" || currChar == "[") {
                            layer = 1;
                        }
                    }
                } else {
                    if (currChar == "{" || currChar == "[") {
                        ++layer;
                    }
                    if (currChar == "}" || currChar == "]") {
                        --layer;
                    }
                    if ((currChar == "," || currChar == "}" || currChar == "]") && layer <= 0) {
                        stop = currChar == "," ? i : i + 1 + layer;
                        break;
                    }
                }
            }
 
            if (start <= 0 || stop <= 0 || start > length(json) || stop > length(json) || start >= stop) {
                if (foundKeyCount == 0) {print defaultValue;} exit 0;
            } else {
                print substr(json, start, stop - start);
            }
 
            json = substr(json, stop + 1, length(json) - stop)
        }
    }'
}

localpath=$path"/"$pic_path

# get image url from api
function get_randweb_from_api() {
	setting=`head -1 source/setting`
	url="https://wallhaven.cc/api/v1/search?q=${search}&${setting}"
	json=`curl -ss $url`
	pic_url=($(getJsonValuesByAwk "$json" "path" ""))
	# Fight back and forth
	local key=$(($RANDOM%24))
	pic_url=${pic_url[$key]#*\"}
	pic_url=${pic_url%*\"}
	echo "$url $pic_url"
}

function get_pic() {
	if [ $pic_path == "randweb" ]; then												# Get a random wallpaper from wallhaven
		pic_url=($(get_randweb_from_api))
		echo ${pic_url[0]}
		pic_url=${pic_url[1]}
		format=${pic_url##*.}
		time=`date +%s`
		random_pic_path="background/random"$time".$format"
		rm -f background/random*
		curl -o $random_pic_path "$pic_url" > /dev/null 2>&1
		pic_path=$random_pic_path
	elif [ $pic_path == "randlocal" ]; then											# Random from the locally saved wallpaper
		max_c=`ls background | wc -l`
		random_val=$(random $max_c)
		pic_path="background/"`ls background | sed -n "${random_val}p" `
	elif [ $pic_path == "save" ]; then												# Save the random web wallpaper to the local PC
        save_file=`ls -l -t background/ | head -2 | tail -1 | awk '{print $NF}'`
		if [ ${save_file:0:6} == "random" ] ; then
			mv -f background/$save_file background/x_$save_file
		fi
        exit 0
	elif [ $pic_path=="set" ]; then													# Configure the wallpaper randomly on the web
		# If there are no parameters, type a prompt
		if [ $param2 != "categories" -a $param2 != "purity" -a $param2 != "sorting" -a $param2 != "order" -a $param2 != "topRange" -a $param2 != "atleast" -a $param2 != "resolutions" -a $param2 != "ratios" -a $param2 != "colors" -a $param2 != "page" -a $param2 != "seed" -a $param2 != "apikey" ]; then
			echo "when first param is set,the second param should be only apikey|categories|purity|sorting|order|topRange|atleast|resolutions|ratios|colors|page|seed"
			exit -1
		fi

		# Obtain an existing configuration file
		setting=`head -1 source/setting`
		arrayTmp=(${setting//&/ })
		# key and value
		declare -a arr
		declare -a map
		i=0
		for var in ${arrayTmp[*]}
		do
			tmp=(${var//=/ })
			if [[ ! ${tmp[1]} == '' ]];then
				map[$i]=${tmp[0]}
				arr[$i]=${tmp[1]}
				let i+=1
			fi
		done

		declare -a new_arr
		declare -a new_map
		paramInarr=0
		i=0

		# For data already in the parameter table, the new value is replaced if it has content, and the parameter is deleted if it has no content
		for var in ${map[*]}
		do
			if [ $param2 == $var ]; then
				paramInarr=1
				if [[ ! $param3 == "" ]]; then
					new_map[$i]=$var
					new_arr[$i]=$param3
				fi
				let i+=1
			else
				new_map[$i]=$var
				new_arr[$i]=${arr[$i]}
				let i+=1
			fi
		done
		new_arr=(${new_arr[*]})		# Array rearrangement index
		new_map=(${new_map[*]})

		# If the new parameter is outside the existing scope and is not an empty parameter. Just add in
		if [[ $paramInarr == "0" ]] && [[ ! $param3 == "" ]]; then
			new_map[$i]="$param2"
			new_arr[$i]="$param3"
		fi

		# Reconcatenates the parameters into the content of a url filter
		i=0
		setting=''
		for key in ${new_map[*]}
		do
			value=${new_arr[$i]}
			if [ $i == 0 ]; then
				setting="$key=$value"
			else
				setting="$setting&$key=$value"
			fi
			let i+=1
		done

		# Save the new configuration file to a file:source/setting
		echo $setting
		echo $setting > source/setting
		exit 0
	fi
	localpath=$path"/"$pic_path
}

# Call python to calendar the wallpaper
function composite() {
	if [ $composite == "yes" ]; then
		python bin/generate_code_calender.py $pic_path $week_num
		localpath=$path"/composite/code_calendar_wallpaper_$week_num.jpg"
	fi
}

function set_pic() {
	#time=$(date +%F_%X)
	#cp -f $localpath $localpath$time
	#osascript -e "tell application \"Finder\" to set desktop picture to POSIX file \"$localpath$time\""
	#rm -f $localpath$time
	osascript -e "tell application \"Finder\" to set desktop picture to POSIX file \"$localpath\""
}

get_pic
composite
set_pic
